diff -ur -x libtool -x '*.o' -x '*.lo' -x '*.la*' -x configure.lineno -x config.status -x config.log -x '*.Plo' -x '*.Po' -x .svn -x .git usr0/include/stdlib.h usr/include/stdlib.h
--- usr0/include/stdlib.h	2012-03-23 04:32:58.000000000 +0100
+++ usr/include/stdlib.h	2012-04-17 09:50:54.000000000 +0200
@@ -384,7 +384,7 @@
 int	mkdir(const char *, mode_t);
 void perror (const char *);
 int rmdir (const char *);
-void *sbrk(intptr_t);
+//void *sbrk(intptr_t);
 unsigned sleep (unsigned);
 long ulimit (int, ...);
 
@@ -413,7 +413,7 @@
 int _mkdir (const char *, long);
 int _putenv (const char *);
 int _rmdir (const char *);
-void *_sbrk(intptr_t);
+//void *_sbrk(intptr_t);
 unsigned _sleep (unsigned);
 void _swab (const void *, void *, size_t);
 long _ulimit (int, ...);
diff -ur -x libtool -x '*.o' -x '*.lo' -x '*.la*' -x configure.lineno -x config.status -x config.log -x '*.Plo' -x '*.Po' -x .svn -x .git usr0/include/sys/mman.h usr/include/sys/mman.h
--- usr0/include/sys/mman.h	2012-03-23 04:33:00.000000000 +0100
+++ usr/include/sys/mman.h	2012-04-17 09:53:44.000000000 +0200
@@ -59,7 +59,7 @@
 #define	PROT_WRITE	0x02	/* pages can be written */
 #define	PROT_EXEC	0x04	/* pages can be executed */
 
-#if 0  /* bird */
+#if 1  /* yd, bird */
 /*
  * Flags contain sharing type and options.
  * Sharing types; choose one.
@@ -183,11 +183,14 @@
 #ifndef _MMAP_DECLARED
 #define	_MMAP_DECLARED
 /** @todo void *	mmap(void *, size_t, int, int, int, off_t); */
+void *	mmap(void *, size_t, int, int, int, off_t);
 #endif
 int	mprotect(const void *, size_t, int);
 /** @todo int	msync(void *, size_t, int); */
+int	msync(void *, size_t, int);
 /** @todo int	munlock(const void *, size_t); */
 /** @todo int	munmap(void *, size_t); */
+int	munmap(void *, size_t);
 #if __POSIX_VISIBLE >= 200112
 /** @todo int	posix_madvise(void *, size_t, int); */
 #endif
diff -ur -x libtool -x '*.o' -x '*.lo' -x '*.la*' -x configure.lineno -x config.status -x config.log -x '*.Plo' -x '*.Po' -x .svn -x .git usr0/include/386/builtin.h usr/include/386/builtin.h
--- usr0/include/386/builtin.h	2014-10-26 20:17:10.000000000 +0100
+++ usr/include/386/builtin.h	2015-01-22 09:28:10.000000000 +0100
@@ -15,7 +15,8 @@
 static __inline__ signed char __cxchg (__volatile__ signed char *p,
                                        signed char v)
 {
-  __asm__ __volatile__ ("xchgb %0, %1" : "=m"(*p), "=r"(v) : "1"(v));
+  //__asm__ __volatile__ ("xchgb %0, %1" : "=m"(*p), "=r"(v) : "1"(v));
+  __asm__ __volatile__ ("xchgb %0, %1" : "=m"(*p), "=q"(v) : "1"(v));
   return v;
 }
 
diff -ur -x libtool -x '*.o' -x '*.lo' -x '*.la*' -x configure.lineno -x config.status -x config.log -x '*.Plo' -x '*.Po' -x .svn -x .git usr0/include/stddef.h usr/include/stddef.h
--- usr0/include/stddef.h	2015-01-23 21:19:18.000000000 +0100
+++ usr/include/stddef.h	2015-01-21 09:07:34.000000000 +0100
@@ -85,4 +85,18 @@
 #endif
 /* bird: EMX - end */
 
+#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
+  || (defined(__cplusplus) && __cplusplus >= 201103L)
+#ifndef _GCC_MAX_ALIGN_T
+#define _GCC_MAX_ALIGN_T
+/* Type whose alignment is supported in every context and is at least
+   as great as that of any standard type not using alignment
+   specifiers.  */
+typedef struct {
+  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
+  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
+} max_align_t;
+#endif
+#endif /* C11 or C++11.  */
+
 #endif /* _STDDEF_H_ */
